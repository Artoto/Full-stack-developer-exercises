โจทย์ที่ 1: สร้างหน้าฟอร์มสมัครสมาชิก
สร้างฟอร์มในหน้าเว็บที่ให้ผู้ใช้กรอก ชื่อ, อีเมล, และ รหัสผ่าน.

เมื่อผู้ใช้กรอกข้อมูลและคลิกปุ่ม Submit, ข้อมูลที่กรอกจะถูก ตรวจสอบด้วย JavaScript เพื่อให้แน่ใจว่า:

ชื่อและอีเมลต้องไม่ว่างเปล่า

รหัสผ่านต้องมีอย่างน้อย 6 ตัว

เมื่อกดส่งข้อมูล, แสดงข้อความ ว่าผู้ใช้กรอกข้อมูลถูกต้องหรือไม่ และ แสดงข้อมูลที่กรอก.

ขั้นตอน:

สร้างฟอร์ม HTML และใช้ JavaScript สำหรับการตรวจสอบข้อมูลที่กรอก

ใช้ Event Listener สำหรับการตรวจสอบและแสดงผลข้อมูล

เพิ่มการทำงานแบบ responsive เพื่อให้ฟอร์มสามารถแสดงผลได้ดีทั้งในเดสก์ท็อปและมือถือ

โจทย์ที่ 2: สร้างเว็บเซิร์ฟเวอร์ด้วย Node.js และ Express.js
สร้างเว็บเซิร์ฟเวอร์ด้วย Node.js และ Express.js ที่สามารถทำงานกับ HTTP requests.

ให้เซิร์ฟเวอร์มีเส้นทาง (routes) ที่รองรับ:

/: หน้าหลักแสดงข้อความ "Welcome to My Website"

/register: ฟอร์มสมัครสมาชิกที่ใช้ข้อมูลแบบ GET/POST

/user/:id: แสดงข้อมูลของผู้ใช้ตาม ID ที่รับจาก URL

ขั้นตอน:

ติดตั้ง Node.js และ Express.js

สร้าง routes สำหรับหน้า / และ /register

ใช้ GET/POST เพื่อรับข้อมูลจากผู้ใช้ในฟอร์ม

สร้าง /user/:id สำหรับการแสดงข้อมูลของผู้ใช้

โจทย์ที่ 3: สร้างระบบการบันทึกข้อมูลผู้ใช้ในฐานข้อมูล MongoDB
ใช้ MongoDB กับ Mongoose เพื่อเก็บข้อมูลผู้ใช้ที่กรอกในฟอร์ม สมัครสมาชิก

เมื่อผู้ใช้สมัคร, ข้อมูลจะถูกเก็บลงใน ฐานข้อมูล MongoDB และแสดงข้อความว่า "สมัครสมาชิกสำเร็จ!"

สามารถดูข้อมูลผู้ใช้ที่สมัครได้จาก URL เช่น /users ซึ่งจะแสดงรายชื่อผู้ใช้ทั้งหมดที่เก็บไว้ในฐานข้อมูล

ขั้นตอน:

ติดตั้ง MongoDB และ Mongoose

สร้าง model สำหรับข้อมูลผู้ใช้

เชื่อมต่อ MongoDB และบันทึกข้อมูลจากฟอร์มลงในฐานข้อมูล

สร้าง route สำหรับการแสดงรายการผู้ใช้ทั้งหมด

โจทย์ที่ 4: สร้างระบบการเข้าสู่ระบบ (Login)
สร้างหน้าเว็บ Login ที่ให้ผู้ใช้กรอก อีเมล และ รหัสผ่าน.

เมื่อผู้ใช้กด Login, ระบบจะตรวจสอบว่าอีเมลและรหัสผ่านตรงกับข้อมูลในฐานข้อมูลหรือไม่.

หากตรง, แสดงข้อความ "เข้าสู่ระบบสำเร็จ!" หากไม่ตรง, แสดงข้อความ "อีเมลหรือรหัสผ่านไม่ถูกต้อง"

ขั้นตอน:

ใช้ Express.js สร้างระบบการรับข้อมูลจากฟอร์ม Login

เชื่อมต่อกับ MongoDB เพื่อตรวจสอบข้อมูลผู้ใช้

ใช้ bcrypt สำหรับการเข้ารหัสรหัสผ่าน

โจทย์ที่ 5: สร้าง API สำหรับ CRUD (Create, Read, Update, Delete)
สร้าง API ที่ใช้ทำงานกับข้อมูลผู้ใช้ (เช่น ชื่อ, อีเมล) โดยมีฟังก์ชัน CRUD:

POST: สร้างข้อมูลผู้ใช้ใหม่

GET: อ่านข้อมูลผู้ใช้

PUT: อัปเดตข้อมูลผู้ใช้

DELETE: ลบข้อมูลผู้ใช้

ขั้นตอน:

สร้าง routes สำหรับการจัดการข้อมูลผู้ใช้

ใช้ Mongoose เพื่อเชื่อมต่อกับ MongoDB

ใช้ Postman หรือ curl เพื่อทดสอบการเรียกใช้งาน API